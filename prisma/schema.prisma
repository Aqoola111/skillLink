generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PaymentType {
  MONEY
  BARTER
  BOTH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum BarterStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                   String                    @id @default(cuid())
  name                 String?
  email                String?                   @unique
  password             String
  image                String?
  role                 Role                      @default(USER)
  skills               Skill[]                   @relation("UserSkills")
  bookings             Booking[]                 @relation("UserBookings")
  reviews              Review[]                  @relation("UserReviews")
  messages             Message[]                 @relation("UserMessages")
  conversations        ConversationParticipant[]
  sentBarterOffers     BarterOffer[]             @relation("SentBarterOffers")
  receivedBarterOffers BarterOffer[]             @relation("ReceivedBarterOffers")
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
}

model Category {
  id              String                 @id @default(cuid())
  name            String                 @unique
  skills          Skill[]                @relation("CategorySkills")
  tags            Tag[]
  allowedInSkills SkillAllowedCategory[] @relation("AllowedCategories")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
}

model Tag {
  id              String            @id @default(cuid())
  name            String
  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      String
  skills          Skill[]           @relation("SkillTags")
  allowedInSkills SkillAllowedTag[] @relation("AllowedTags")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([name, categoryId])
  @@index([categoryId])
}

model Skill {
  id                 String                 @id @default(cuid())
  title              String
  description        String
  price              Float?
  paymentType        PaymentType            @default(MONEY)
  owner              User                   @relation("UserSkills", fields: [ownerId], references: [id])
  icon               String?
  ownerId            String
  bookings           Booking[]
  reviews            Review[]
  categoryId         String?
  Category           Category?              @relation("CategorySkills", fields: [categoryId], references: [id])
  tags               Tag[]                  @relation("SkillTags")
  allowedCategories  SkillAllowedCategory[]
  allowedTags        SkillAllowedTag[]
  offeredInBarters   BarterOffer[]          @relation("OfferedSkill")
  requestedInBarters BarterOffer[]          @relation("RequestedSkill")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  @@index([ownerId])
  @@index([categoryId])
}

model SkillAllowedCategory {
  skill      Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId    String
  category   Category @relation(name: "AllowedCategories", fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([skillId, categoryId])
  @@index([categoryId])
}

model SkillAllowedTag {
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String
  tag     Tag    @relation(name: "AllowedTags", fields: [tagId], references: [id], onDelete: Cascade)
  tagId   String

  @@id([skillId, tagId])
  @@index([tagId])
}

model Booking {
  id        String        @id @default(cuid())
  user      User          @relation("UserBookings", fields: [userId], references: [id])
  userId    String
  skill     Skill         @relation(fields: [skillId], references: [id])
  skillId   String
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([skillId])
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([skillId])
}

model Conversation {
  id            String                    @id @default(cuid())
  barterOfferId String?                   @unique
  barterOffer   BarterOffer?              @relation("OfferConversation", fields: [barterOfferId], references: [id])
  messages      Message[]
  participants  ConversationParticipant[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
}

model ConversationParticipant {
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([senderId])
  @@index([conversationId])
}

model BarterOffer {
  id               String        @id @default(cuid())
  fromUser         User          @relation("SentBarterOffers", fields: [fromUserId], references: [id])
  fromUserId       String
  toUser           User          @relation("ReceivedBarterOffers", fields: [toUserId], references: [id])
  toUserId         String
  offeredSkill     Skill         @relation("OfferedSkill", fields: [offeredSkillId], references: [id])
  offeredSkillId   String
  requestedSkill   Skill         @relation("RequestedSkill", fields: [requestedSkillId], references: [id])
  requestedSkillId String
  status           BarterStatus  @default(PENDING)
  conversation     Conversation? @relation("OfferConversation")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@index([offeredSkillId])
  @@index([requestedSkillId])
}
