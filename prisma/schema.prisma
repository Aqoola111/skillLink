generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PaymentType {
  MONEY
  BARTER
  BOTH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum BarterStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String?       @unique
  password             String
  image                String?
  role                 Role          @default(USER)
  skills               Skill[]       @relation("UserSkills")
  bookings             Booking[]     @relation("UserBookings")
  reviews              Review[]      @relation("UserReviews")
  messages             Message[]     @relation("UserMessages")
  sentBarterOffers     BarterOffer[] @relation("SentBarterOffers")
  receivedBarterOffers BarterOffer[] @relation("ReceivedBarterOffers")
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Skill {
  id                 String        @id @default(cuid())
  title              String
  description        String
  price              Float?
  paymentType        PaymentType   @default(MONEY)
  owner              User          @relation("UserSkills", fields: [ownerId], references: [id])
  ownerId            String
  bookings           Booking[]
  reviews            Review[]
  offeredInBarters   BarterOffer[] @relation("OfferedSkill")
  requestedInBarters BarterOffer[] @relation("RequestedSkill")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Booking {
  id        String        @id @default(cuid())
  user      User          @relation("UserBookings", fields: [userId], references: [id])
  userId    String
  skill     Skill         @relation(fields: [skillId], references: [id])
  skillId   String
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BarterOffer {
  id               String       @id @default(cuid())
  fromUser         User         @relation("SentBarterOffers", fields: [fromUserId], references: [id])
  fromUserId       String
  toUser           User         @relation("ReceivedBarterOffers", fields: [toUserId], references: [id])
  toUserId         String
  offeredSkill     Skill?       @relation("OfferedSkill", fields: [offeredSkillId], references: [id])
  offeredSkillId   String?
  requestedSkill   Skill?       @relation("RequestedSkill", fields: [requestedSkillId], references: [id])
  requestedSkillId String?
  status           BarterStatus @default(PENDING)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}
